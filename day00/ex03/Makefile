# Fréquence du microcontrôleur
# The macro F_CPU specifies the CPU frequency to be considered by the delay macros. 
# The line "F_CPU = 16000000UL" sets the value of the CPU clock frequency to 16 MHz (megaHertz), which is the clock speed of the ATmega328P microcontroller. This value is used later in the makefile when compiling the program using avr-gcc.

F_CPU = 16000000UL

RM = rm -rf

# Nom du fichier source et des fichiers générés			
SRCS =	main.c
BIN =	${SRCS:.c=.bin}
HEX = 	${SRCS:.c=.hex}

# The "all" rule specifies that the makefile should first create the hex file by compiling the source code using avr-gcc and converting the binary output to Intel Hex format using avr-objcopy.
all: hex flash

hex: ${SRCS}
	avr-gcc -mmcu=atmega328p -DF_CPU=${F_CPU} -Os ${SRCS} -o ${BIN}
	avr-objcopy -O ihex ${BIN} ${HEX}


#FLASH
#"-c arduino": This option specifies the type of programmer being used to communicate with the target microcontroller.

# -p atmega328p": This option specifies the type of microcontroller that is being programmed. In this case, it is the ATmega328P microcontroller.

# -b 115200 speed of communication over datachanel

# -U flash:w:${HEX}:i": This option specifies the operation to be performed on the target microcontroller. The "-U" option tells avrdude to perform a memory operation, and "flash" specifies that the operation is on the flash memory of the microcontroller. The "w" specifies that avrdude should write to the flash memory. "${HEX}" is a placeholder that will be replaced with the name of the HEX file to be loaded, and the ":i" at the end of the command tells avrdude to interpret the input file as an Intel HEX file.

# Taken together, this command-line instruction instructs avrdude to program the ATmega328P microcontroller using a USBasp programmer, writing the contents of the specified Intel HEX file to the flash memory of the microcontroller. The actual name of the HEX file is determined by the build system or the user and is replaced with the "${HEX}" placeholder.


flash:
	avrdude -c arduino -p atmega328p -b 115200 -U flash:w:${HEX}:i -P${shell ls /dev/ttyUSB0}

clean:
	${RM} ${HEX} ${BIN}


#HEX
#La règle hex utilise le compilateur avr-gcc pour compiler le fichier source main.c en langage machine, avec la fréquence du microcontrôleur sélectionnée par la variable F_CPU. Ensuite, elle utilise la commande avr-objcopy pour générer un fichier main.hex à partir du fichier binaire main.bin.

# adding support for a new device consists in writing a new spec file for that device and supply it by means of

# avr-gcc -mmcu=mydevice -B path-to-dir ...
# So, "-DF_CPU=$(F_CPU)" is a command line option that defines a preprocessor macro named "F_CPU"
# -Os": This option specifies the optimization level for the compiler. The letter "O" indicates that optimization is enabled, and the letter "s" indicates that the compiler should optimize for code size rather than execution speed.

# Taken together, this command-line instruction instructs the AVR-GCC compiler to compile the specified source file with optimization for code size, targeting the ATmega328P microcontroller, and with a preprocessor macro "F_CPU" defined with the value specified by the environment variable "F_CPU". The resulting binary file is written to the location and with the name specified by "$(BIN)".

############
# the avr-objcopy tool, which is used to copy and convert object files in various formats


#"-O ihex": This option specifies the output format of the resulting file to be Intel HEX format. Intel HEX format is a standard format used for representing binary data in ASCII text format, commonly used in microcontroller applications.

#-R .eeprom": This option tells the tool to remove the .eeprom section from the input file. The .eeprom section is typically used for storing non-volatile data in the microcontroller's EEPROM memory. Since this command is only generating a HEX file for the flash memory, there is no need to include the EEPROM data in the output.

# $(BIN)": This is a placeholder for the input binary file that will be converted to the HEX format. The actual file name is determined by the build system or the user.

# $(HEX)": This option specifies the name and location of the output HEX file that will be generated by the tool. The placeholder "$(HEX)" is replaced with the actual name of the HEX file by the build system or the user.

# Taken together, this command-line instruction instructs the avr-objcopy tool to convert the specified binary input file to Intel HEX format, removing the .eeprom section, and write the resulting output to the location and with the name specified by "$(HEX)". The resulting HEX file can then be loaded onto the microcontroller's flash memory using a programmer or bootloader.























# Fréquence du microcontrôleur
# F_CPU = 16000000UL

# # Nom du fichier source et des fichiers générés
# SRC = main.c
# BIN = main.bin
# HEX = main.hex

# all: hex flash


# hex: $(SRC)
#     avr-gcc -mmcu=atmega328p -DF_CPU=$(F_CPU) -Os $(SRC) -o $(BIN)
#     avr-objcopy -O ihex -R .eeprom $(BIN) $(HEX)

# flash: $(HEX)
#     avrdude -c usbasp -p atmega328p -U flash:w:$(HEX):i

# clean:
#     rm -f $(BIN) $(HEX)
